<?xml version="1.0"?>
<documentation><title>Forms</title><description>Forms documentation</description><itens><item><function>function createElement(type, options = []) {&#xD;
	let element = "";&#xD;
	switch (type) {&#xD;
		case "column":&#xD;
			element = document.createElement("div");&#xD;
			element.classList.add("column");&#xD;
			if (options.length&amp;gt; 0)&#xD;
				__DefineCreateElementOptions(element, options);&#xD;
			return element;&#xD;
&#xD;
		case "input-group":&#xD;
			element = document.createElement("div");&#xD;
			element.classList.add("input-group");&#xD;
			if (options.length&amp;gt; 0)&#xD;
				__DefineCreateElementOptions(element, options);&#xD;
			return element;&#xD;
&#xD;
		case "color-picker":&#xD;
			element = createElement("input-group");&#xD;
			element.appendChild(&#xD;
				createElement("input-color", options.inputConfig),&#xD;
			);&#xD;
			element.appendChild(createElement("label", options.labelConfig));&#xD;
			element.appendChild(createElement("button", options.buttonConfig));&#xD;
&#xD;
			return element;&#xD;
&#xD;
		case "input-color":&#xD;
			element = document.createElement("input");&#xD;
			element.setAttribute("type", "color");&#xD;
			if (options.length&amp;gt; 0)&#xD;
				__DefineCreateElementOptions(element, options);&#xD;
			return element;&#xD;
&#xD;
		default:&#xD;
			element = document.createElement(type);&#xD;
			if (options.length&amp;gt; 0)&#xD;
				__DefineCreateElementOptions(element, options);&#xD;
			return element;&#xD;
	}&#xD;
}</function><params><param type="string" variable="type" description="The of the element"/><param type="Array" variable="options" description="Array of objects to be attached to the element"/></params><signature>function createElement(type, options = [])</signature><description>Create a DOMElement</description><return>@returns {DOMElement}</return><title>createElement</title></item><item><function>function __DefineCreateElementOptions(element, options) {&#xD;
	options.forEach((option) =&gt; {&#xD;
		switch (option.key) {&#xD;
			case "id":&#xD;
				element.setAttribute("id", option.value);&#xD;
				break;&#xD;
&#xD;
			case "class":&#xD;
				option.value.forEach((item) =&gt; {&#xD;
					if(item == "") return;&#xD;
					element.classList.add(item);&#xD;
				});&#xD;
				break;&#xD;
&#xD;
			case "content":&#xD;
				if(typeof option.value == "object") {&#xD;
					option.value.forEach( item =&gt; {&#xD;
						element.innerHTML += item;&#xD;
					});&#xD;
				} else element.innerHTML = option.value;&#xD;
				break;&#xD;
&#xD;
			case "name":&#xD;
				element.name = option.value;&#xD;
				break;&#xD;
&#xD;
			case "for":&#xD;
				element.for = option.value;&#xD;
				break;&#xD;
&#xD;
			default:&#xD;
				element.setAttribute(option.key, option.value);&#xD;
		}&#xD;
	});&#xD;
}</function><params><param type="DOMElement" variable="element" description="The to be edited"/><param type="Array" variable="options" description="Array of objects to be attached to the element"/></params><signature>function __DefineCreateElementOptions(element, options)</signature><description>Modify the element given</description><return>@returns {void}</return><title>__DefineCreateElementOptions</title></item><item><function>function setId(element, elementId) {&#xD;
	element.setAttribute("id", elementId);&#xD;
}</function><params><param type="DOMElement" variable="element" description="Given element"/><param type="string" variable="elementId" description="ID value"/></params><signature>function setId(element, elementId)</signature><description>Change DOM Element ID</description><return/><title>setId</title></item><item><function>function ToggleClass(element, class1, class2) {&#xD;
	if (element.classList.contains(class1)) {&#xD;
		element.classList.remove(class1);&#xD;
		element.classList.add(class2);&#xD;
	} else {&#xD;
		element.classList.remove(class2);&#xD;
		element.classList.add(class1);&#xD;
	}&#xD;
}</function><params><param type="DOMElement" variable="element" description="Given element"/><param type="string" variable="class1" description="Current class"/><param type="string" variable="class2" description="Destination class"/></params><signature>function ToggleClass(element, class1, class2)</signature><description>Toggle classes of the given element</description><return/><title>ToggleClass</title></item><item><function>function HasClass(element, className) {&#xD;
	return element.classList.contains(className);&#xD;
}</function><params><param type="DOMElement" variable="element" description="Element to be checked"/><param type="string" variable="className" description="Class to be searched"/></params><signature>function HasClass(element, className)</signature><description>Check if given element has the class given</description><return>@returns {bool}</return><title>HasClass</title></item><item><function>function RemoveAllClasses(element) {&#xD;
	return element.classList.forEach( item =&gt; {&#xD;
		element.classList.remove(item);&#xD;
	});&#xD;
}</function><params><param type="DOMElement" variable="element" description="Given element"/></params><signature>function RemoveAllClasses(element)</signature><description>Remove all classes of element given</description><return>@returns {void}</return><title>RemoveAllClasses</title></item><item><function>function AssociateFunction(element, event, functionName) {&#xD;
	return element.setAttribute(event, functionName + "()");&#xD;
}</function><params><param type="DOMElement" variable="element" description="Given element"/><param type="string" variable="event" description="Name of event"/><param type="string" variable="functionName" description="Function name to be hooked"/></params><signature>function AssociateFunction(element, event, functionName)</signature><description>Associate an event to a created function</description><return>@returns {void}</return><title>AssociateFunction</title></item><item><function>function SwitchFunction(element, event, functionName) {&#xD;
	element.setAttribute(event, "");&#xD;
	return element.setAttribute(event, functionName + "()");&#xD;
}</function><params><param type="DOMElement" variable="element" description="Given element"/><param type="strin" variable="event" description="Event name"/><param type="string" variable="functionName" description="Function to be added"/></params><signature>function SwitchFunction(element, event, functionName)</signature><description>Change the current function when an event is called</description><return>@returns {void}</return><title>SwitchFunction</title></item><item><function>function SwitchButton(element, type) {&#xD;
	switch (type) {&#xD;
		case "start":&#xD;
			element.value = "start";&#xD;
			element.innerHTML = "Start";&#xD;
			element.classList.remove("btn-danger");&#xD;
			element.classList.add("btn-normal");&#xD;
			break;&#xD;
&#xD;
		case "stop":&#xD;
			element.value = "stop";&#xD;
			element.innerHTML = "Stop";&#xD;
			element.classList.remove("btn-normal");&#xD;
			element.classList.add("btn-danger");&#xD;
			break;&#xD;
	}&#xD;
}</function><params><param type="DOMElement" variable="element" description="Given element"/><param type="string" variable="type" description="State to toggle button"/></params><signature>function SwitchButton(element, type)</signature><description>Switch the type of a button</description><return>@returns {void}</return><title>SwitchButton</title></item><item><function>function isChecked(elementId) {&#xD;
	return document.getElementById(elementId).value == "on";&#xD;
}</function><params><param type="string" variable="elementId" description="ID of DOM element to be found"/></params><signature>function isChecked(elementId)</signature><description>Check if and element is checked</description><return>@returns {bool}</return><title>isChecked</title></item><item><function>function isDisabled(elementId) {&#xD;
	return document.getElementById(elementId).disabled;&#xD;
}</function><params><param type="string" variable="elementId" description="ID of DOM element to be found"/></params><signature>function isDisabled(elementId)</signature><description>Check if and element is disabled</description><return>@returns {bool}</return><title>isDisabled</title></item><item><function>function disabledField(elementId) {&#xD;
	let element = document.getElementById(elementId);&#xD;
	element.disabled = true;&#xD;
}</function><params><param type="string" variable="elementId" description="ID of DOM element to be disable"/></params><signature>function disabledField(elementId)</signature><description>Disable a DOM element</description><return>@returns {void}</return><title>disabledField</title></item><item><function>function DisabledAll(elementList) {&#xD;
	elementList.forEach((item) =&gt; {&#xD;
		item.disabled = true;&#xD;
	});&#xD;
}</function><params><param type="DOMElement[]" variable="elementList" description="Array of DOM element to be disable"/></params><signature>function DisabledAll(elementList)</signature><description>Disable a list of DOM Elements</description><return>@returns {void}</return><title>DisabledAll</title></item><item><function>function ToggleDisabledAll(elementList) {&#xD;
	elementList.forEach((item) =&gt; {&#xD;
		item.disabled = !item.disabled;&#xD;
	});&#xD;
}</function><params><param type="DOMElement[]" variable="elementList" description="Array of DOM element to be disable"/></params><signature>function ToggleDisabledAll(elementList)</signature><description>Toggle disable a list of DOM Elements</description><return>@returns {void}</return><title>ToggleDisabledAll</title></item><item><function>function ToggleVisible(element) {&#xD;
	if (element.classList.contains('hidden')) {&#xD;
		element.classList.remove("hidden");&#xD;
	} else {&#xD;
		element.classList.add("hidden");&#xD;
	}&#xD;
}</function><params><param type="DOMElement" variable="element" description="Element to be toggle"/></params><signature>function ToggleVisible(element)</signature><description>Toggle the visibility of a DOM Element</description><return>@returns {void}</return><title>ToggleVisible</title></item><item><function>function ToggleFields(elementParentId) {&#xD;
	let elements = document.querySelectorAll(`#${elementParentId} input`);&#xD;
	elements.forEach((item) =&gt; {&#xD;
		item.disabled = !item.disabled;&#xD;
	});&#xD;
}</function><params><param type="string" variable="elementParentId" description="ID of parent fields to be toggle"/></params><signature>function ToggleFields(elementParentId)</signature><description>Toggle fields by parent</description><return>@returns {void}</return><title>ToggleFields</title></item><item><function>function ToggleDisabled(elementName) {&#xD;
	let element = document.querySelector(elementName);&#xD;
	element.disabled = !element.disabled;&#xD;
}</function><params><param type="string" variable="elementName" description="Identifier of element"/></params><signature>function ToggleDisabled(elementName)</signature><description>Toggle disable a DOM Element</description><return>@returns {void}</return><title>ToggleDisabled</title></item><item><function>function ClearAllInputs() {&#xD;
	let elements = document.querySelectorAll("input");&#xD;
	elements.forEach((item) =&gt; {&#xD;
		item.value = "";&#xD;
	});&#xD;
}</function><params/><signature>function ClearAllInputs()</signature><description>Clear all inputs</description><return>@returns {void}</return><title>ClearAllInputs</title></item><item><function>function ClearAllTextareas() {&#xD;
	let elements = document.querySelectorAll("textarea");&#xD;
	elements.forEach((item) =&gt; {&#xD;
		item.value = "";&#xD;
	});&#xD;
}</function><params/><signature>function ClearAllTextareas()</signature><description>Clear all textareas</description><return>@returns {void}</return><title>ClearAllTextareas</title></item><item><function>function CheckForValidField(field) {&#xD;
	if (field.value.length&amp;lt; 3) {&#xD;
		return false;&#xD;
	} else {&#xD;
		return true;&#xD;
	}&#xD;
}</function><params><param type="DOMElement" variable="field" description="Element to be checked"/></params><signature>function CheckForValidField(field)</signature><description>Check if the field has content</description><return>@returns {bool}</return><title>CheckForValidField</title></item><item><function>function ValidateField(item) {&#xD;
	let inputGroup = item.parentNode;&#xD;
&#xD;
	if (item.value.length&amp;lt; 3) {&#xD;
		if (!inputGroup.classList.contains("invalid-group")) {&#xD;
			InvalidateField(inputGroup);&#xD;
		}&#xD;
	} else {&#xD;
		if (inputGroup.classList.contains("invalid-group")) {&#xD;
			inputGroup.classList.remove("invalid-group");&#xD;
			inputGroup.querySelector("p").remove();&#xD;
		}&#xD;
	}&#xD;
}</function><params><param type="DOMElement" variable="item" description="Element to be validated"/></params><signature>function ValidateField(item)</signature><description>Validate a input</description><return>@returns {void}</return><title>ValidateField</title></item><item><function>function InvalidateField(item, errorMesage = "") {&#xD;
	item.classList.add("invalid-group");&#xD;
	item.appendChild(&#xD;
		createElement("p", [&#xD;
			{&#xD;
				key: "content",&#xD;
				value:&#xD;
					errorMesage != ""&#xD;
						? errorMesage&#xD;
						: "This field can't be empty!",&#xD;
			},&#xD;
		]),&#xD;
	);&#xD;
}</function><params><param type="DOMElement" variable="item" description="Element to be invalidated"/><param type="string" variable="errorMesage" description="Message to be display"/></params><signature>function InvalidateField(item, errorMesage = "")</signature><description>Set an input group as invalid group</description><return>@returns {void}</return><title>InvalidateField</title></item><item><function>function HaveInvalidFields() {&#xD;
	let fields = document.querySelectorAll("[required]");&#xD;
&#xD;
	let invalid = [];&#xD;
&#xD;
	fields.forEach((item) =&gt; {&#xD;
		if (!CheckForValidField(item)) {&#xD;
			invalid.push(item);&#xD;
		}&#xD;
&#xD;
		ValidateField(item);&#xD;
	});&#xD;
&#xD;
	return invalid.length&amp;gt; 0 ? true : false;&#xD;
}</function><params/><signature>function HaveInvalidFields()</signature><description>Check if has invalid fields</description><return>@returns {bool}</return><title>HaveInvalidFields</title></item><item><function>function ToggleRequired(elementName) {&#xD;
	let element = document.querySelector(elementName);&#xD;
	element.required = !element.required;&#xD;
}</function><params><param type="string" variable="elementName" description="Identifier of element"/></params><signature>function ToggleRequired(elementName)</signature><description>Toggle required a DOM Element</description><return>@returns {void}</return><title>ToggleRequired</title></item><item><function>function RemoveInvalidGroup(item) {&#xD;
	item.parentNode.classList.remove("invalid-group");&#xD;
	item.parentNode.querySelector("p").remove();&#xD;
}</function><params><param type="DOMElement" variable="item" description="Element to be invalidated"/></params><signature>function RemoveInvalidGroup(item)</signature><description>Remove an invalid group from input group</description><return>@returns {void}</return><title>RemoveInvalidGroup</title></item><item><function>function SendAlert(mensage) {&#xD;
	if (mensage == "") return;&#xD;
&#xD;
	alert(mensage);&#xD;
}</function><params><param type="string" variable="mensage" description="Message to be show in the alert"/></params><signature>function SendAlert(mensage)</signature><description>Show an alert box in browser</description><return>@returns {void}</return><title>SendAlert</title></item><item><function>function AddAttributeToElement(element, attribute, value) {&#xD;
	return element.setAttribute(attribute, value);&#xD;
}</function><params><param type="DOMElement" variable="element" description="Given element"/><param type="string" variable="attribute" description="Attribute to be added"/><param type="strin" variable="value" description="Value to insert in the attribute"/></params><signature>function AddAttributeToElement(element, attribute, value)</signature><description>Add an attribute into DOM Element</description><return>@returns {void}</return><title>AddAttributeToElement</title></item></itens></documentation>
